/* === PUNCH CARD MAIN CONTAINER === */
.punchCardItemContainer {
  /* Container-agnostic dimensions - takes full height of parent */
  height: 100%;

  --aspect-ratio: 1.3;

  aspect-ratio: var(--aspect-ratio);
  
  /* Establish container context for children */
  container-type: size;
  
  /* Prevent squeezing in flex container */
  flex-shrink: 0;
}

/* === CARD INNER CONTAINER === */
.cardInner {
  --card-height: 100cqh;
  
  /* Apply styling */
  height: var(--card-height);
  aspect-ratio: 1.3;
  
  font-size: 2.5cqh(punch-card);
  background-color: #8d6e63;
  border-radius: calc(var(--card-height) * 0.05);
  box-shadow: 0 0 calc(var(--card-height) * 0.05) 0 rgba(93, 64, 55, 0.3);
  display: flex;
  flex-direction: column;
  position: relative;
  overflow: hidden;
  transition: transform 0.3s ease;
  will-change: transform; 
}

/* === CARD HOVER & INTERACTION EFFECTS === */
.punchCardItemContainer::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.05),
    transparent
  );
  transition: left 0.3s ease;
  pointer-events: none;
  will-change: left;
}

.punchCardItemContainer:hover::before {
  left: 100%;
}

.punchCardItemContainer:hover {
  transform: translateY(-0.5cqh(punch-card));
}

/* === CARD STATE STYLES === */
.statusACTIVE {
  box-shadow: 0 var(--card-shadow-blur) calc(var(--card-shadow-blur) * 2) rgba(255, 152, 0, 0.4);
}

.statusREWARD_READY {
  box-shadow: 
    0 var(--card-shadow-blur) calc(var(--card-shadow-blur) * 2) rgba(76, 175, 80, 0.6),
    0 0 calc(var(--card-shadow-blur) * 3) rgba(76, 175, 80, 0.6);
  animation: rewardGlowOptimized 2s ease-in-out infinite alternate;
  will-change: opacity;
}

.statusREWARD_REDEEMED {
  box-shadow: 0 var(--card-shadow-blur) calc(var(--card-shadow-blur) * 2) rgba(117, 117, 117, 0.4);
  opacity: 0.8;
}

.highlighted {
  animation: highlightRewardOptimized 1.5s ease-out;
  z-index: 10;
}

.selectedForRedemption {
  transform: scale3d(1.02, 1.02, 1);
  box-shadow: 
    0 var(--card-shadow-blur) calc(var(--card-shadow-blur) * 2) rgba(0, 0, 0, 0.3),
    0 0 calc(var(--card-shadow-blur) * 5) rgba(255, 215, 0, 0.9),
    0 0 calc(var(--card-shadow-blur) * 10) rgba(255, 215, 0, 0.6);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s ease;
  will-change: transform;
}

.clickableCard:hover {
  transform: translate3d(0, -0.8cqh(punch-card), 0);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.selectedForRedemption:hover {
  transform: scale3d(1.01, 1.01, 1) translate3d(0, -0.3cqh(punch-card), 0);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.clickableCard {
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform;
}

.flippableCard {
  cursor: pointer;
  transition: transform 0.3s ease;
}

.flippableCard:hover {
  transform: translateY(-0.5cqh(punch-card));
}

.flipping {
  animation: cardFlip 0.6s ease-in-out;
}

/* === SELECTION OVERLAY === */

/* === ANIMATIONS === */
@keyframes rewardGlowOptimized {
  0% {
    opacity: 0.9;
  }
  100% {
    opacity: 1;
  }
}

@keyframes highlightRewardOptimized {
  0% {
    transform: scale3d(1, 1, 1);
    opacity: 1;
  }
  50% {
    transform: scale3d(1.05, 1.05, 1);
    opacity: 0.95;
  }
  100% {
    transform: scale3d(1, 1, 1);
    opacity: 1;
  }
}

@keyframes cardFlip {
  0% {
    transform: rotateY(0deg);
  }
  50% {
    transform: rotateY(90deg);
  }
  100% {
    transform: rotateY(0deg);
  }
}

/* === SLIDE ANIMATIONS === */
.punchCardSlideIn {
  animation: slideInFromLeft 0.6s ease-out forwards;
}

.punchCardSlideRight {
  animation: slideRight 0.6s ease-out forwards;
}

.punchCardSlideOut {
  animation: slideOutAndFade 1s ease-out forwards;
}

@keyframes slideInFromLeft {
  0% {
    transform: translateX(-100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideRight {
  0% {
    transform: translateX(-130%);
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes slideOutAndFade {
  0% {
    transform: translateX(0) scale(1);
    opacity: 1;
  }
  50% {
    transform: translateX(0) scale(0.95);
    opacity: 0.7;
  }
  100% {
    transform: translateX(-100%) scale(0.8);
    opacity: 0;
  }
} 